type Upload {
  user: User! @relation
  type: UploadType!
  cid: String!
  content: Content! @relation
  created: Time!
  deleted: Time
  key: UserKey @relation
  files: [UploadFiles]
}

type UploadFiles @embedded {
  name: String
  type: String
}

enum UploadType {
  BLOB
  MULTIPART
  CAR
}

input CreateUploadFiles {
  name: String
  type: String
}

input CreatePin {
  status: PinStatus!
  statusText: String
  service: PinService!
}
input CreateUploadInput {
  type: UploadType!
  cid: String!
  dagSize: Int!
  files: [CreateUploadFiles]
  key: ID
  pins: [CreatePin]!
}

type Query {
  findUploadByCid(cid: String!): Upload! @resolver
}

query findUploadByCid($cid: String!) {
  findUploadByCid(cid: $cid) {
    _id
    type
    files {
      name
      type
    }
    cid
    type
    created
    key {
      name
    }
    content {
      dagSize
      pins {
        data {
          status
          service
          updated
          created
        }
      }
    }
  }
}

type Mutation {
  createUpload(input: CreateUploadInput): Upload! @resolver
}

mutation createUpload($input: CreateUploadInput!) {
  createUpload(input: $input) {
    _id
    type
    created
    key {
      name
    }
    files {
      name
      type
    }
    user {
      issuer
    }
    content {
      cid
      dagSize
      pins {
        data {
          _id
          status
        }
      }
    }
  }
}

mutation deleteUpload($id: ID!) {
  deleteUpload(id: $id) {
    _id
  }
}
