/**
 * Implements GraphQL resolver which allows to query for scheduled analyze tasks
 *
 * @param {int} size
 * @param {ID} [after]
 * @param {ID} [before]
 * @returns {Page<ScheduledAnalyze>}
 */
CreateFunction({
  name: 'scheduledAnalyses',
  body: Query(
    Lambda(
      ['size', 'after', 'before'],
      Let(
        {
          refs: Call('paginate', Collection('ScheduledAnalyze'), {
            size: Var('size'),
            after: Var('after'),
            before: Var('before'),
          }),
        },
        Map(Var('refs'), Lambda('ref', Get(Var('ref'))))
      )
    )
  ),
  data: {
    gql: {
      meta: {
        location: 'Query',
        field: {
          name: 'scheduledAnalyses',
          directives: [
            {
              name: 'resolver',
              args: { name: 'scheduledAnalyses', paginated: true },
            },
            { name: 'relation', args: {} },
          ],
          description: 'Returns page of scheduled analyze tasks',
          type: {
            NotNull: { List: { NotNull: { Named: 'ScheduledAnalyze' } } },
          },
        },
      },
    },
  },
})
