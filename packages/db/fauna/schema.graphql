type Content {
  cid: String! @unique
  pins: [Pin]! @relation
  dagSize: Int
  created: Time!
}

type Query {
  findContentByCid(cid: String!): Content
  findPinLocationByPeerId(peerId: String!): PinLocation
  findUploadByCid(cid: String!): Upload! @resolver
  listUploads(size: Int!, before: String!): [Upload!]! @resolver
  "Login with sub or issuer"
  login(id: String!): LoginOutput! @resolver
}

type Pin {
  content: Content! @relation
  locations: [PinLocation!] @relation
  status: PinStatus!
  statusText: String
  updated: Time
  created: Time!
  service: PinService!
}

type PinLocation {
  pins: [Pin!] @relation
  peerId: String! @unique
  peerName: String
  region: String
}

enum PinService {
  IPFS_CLUSTER
  PINATA
}

enum PinStatus {
  unknown
  queued
  pinning
  pinned
  failed
}

input UpdatePinLocationInput {
  peerId: String!
  peerName: String
  region: String
}

input UpdatePinInput {
  status: PinStatus
  statusText: String
  updated: Time!
  service: PinService
  locations: [UpdatePinLocationInput]
}

type Mutation {
  updatePin(id: ID!, data: UpdatePinInput): Pin @resolver
  createUploadCustom(input: [CreateUploadInput!]!): [Upload!]! @resolver
  createUser(input: CreateUserInput): User! @resolver
}

type Upload {
  user: User! @relation
  type: UploadType!
  cid: String!
  content: Content! @relation
  created: Time!
  deleted: Time
  key: UserKey @relation
  files: [UploadFiles]
}

type UploadFiles @embedded {
  name: String
  type: String
}

enum UploadType {
  BLOB
  MULTIPART
  CAR
}

input CreateUploadFiles {
  name: String
  type: String
}

input CreatePin {
  status: PinStatus!
  statusText: String
  service: PinService!
}

input CreateUploadInput {
  type: UploadType!
  cid: String!
  dagSize: Int!
  files: [CreateUploadFiles]
  key: ID
  pins: [CreatePin]!
}

type UserKey {
  name: String!
  secret: String! @unique
  user: User! @relation
  created: Time!
  deleted: Time
}

type User {
  issuer: String! @unique
  """
  We need this to dedupe old github login from new magic.link
  """
  sub: String! @unique
  name: String!
  picture: String
  email: String!
  github: String
  publicAddress: String!
  created: Time!
  keys: [UserKey!]! @relation
}

input CreateUserInput {
  sub: String!
  issuer: String!
  email: String!
  publicAddress: String!
  name: String!
  picture: String
  github: String
}

type LoginOutput @embedded {
  secret: String!
  user: User!
  sub: String!
  issuer: String!
  email: String!
  ref: String!
}
